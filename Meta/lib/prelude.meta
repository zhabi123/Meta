(define list (lambda args args))

(define nth
  (lambda (n lst)
    (if (eq? n 0)
        (fst lst)
        (nth (sub n 1) (snd lst)))))

(define foldr
  (lambda (f z lst)
    (if (null? lst)
        z
        (f (fst lst) (foldr f z (snd lst))))))

(define map
  (lambda (f lst)
    (if (null? lst)
        '()
        (cons (f (fst lst)) (map f (snd lst))))))

(define let
  (macro (binding body)
    '((lambda (,(fst binding)) ,body) ,(fst (snd binding)))))
